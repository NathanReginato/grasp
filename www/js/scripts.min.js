angular.module('graspMobile', ['ionic', 'ngStorage'])

.run(function($ionicPlatform) {
  $ionicPlatform.ready(function() {
    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
    // for form inputs)
    if (window.cordova && window.cordova.plugins.Keyboard) {
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
      cordova.plugins.Keyboard.disableScroll(true);

    }
    if (window.StatusBar) {
      // org.apache.cordova.statusbar required
      StatusBar.styleDefault();
    }
  });
})

angular.module('graspMobile')
.factory('landingPage', function($state, $http, $localStorage){

  return {
    signUp: signUp,
    logIn: logIn,
    logOut: logOut
  }

  function signUp(obj){
    // return $http.post('https://panic-button-g20.herokuapp.com/api/v1/auth/signup', obj)
    return $http.post('https://panic-button-g20.herokuapp.com/api/v1/auth/signup', obj)
    .then(function(res){
      return res
    });
  }

  // 'https://panic-button-g20.herokuapp.com/api/v1/auth/signup'

  function logIn(obj){
    // return $http.post('https://panic-button-g20.herokuapp.com/api/v1/auth/login', obj)
    return $http.post('https://panic-button-g20.herokuapp.com/api/v1/auth/login', obj)
    .then(function(res){
      return res
    });
  }

  function logOut() {
    $localStorage.$reset()
    $state.go('landing')
  }

  // 'https://panic-button-g20.herokuapp.com/api/v1/auth/login'
});

function landingController($http, $state, $localStorage, landingPage){
    var vm = this;
    console.log("controller connected");
    vm.signup = function(){
      vm.signup.errors = []
      if (!vm.signup.username) { vm.signup.errors.push('please enter your name') }
      if (!vm.signup.password) { vm.signup.errors.push('please enter your password') }
      if (!vm.signup.email) { vm.signup.errors.push('please enter your email') }
      var obj = {
        name: vm.signup.username,
        password: vm.signup.password,
        email: vm.signup.email
      }
      if (vm.signup.errors.length === 0) {
        landingPage.signUp(obj)
        .then(function(res){
          console.log(res);
          $localStorage.$default({ token: res.data.token })
          $state.go('dashboard');
        }).catch(function(res){
          console.log('this is the catch');
          res.data.errors.forEach(function(elem){
          vm.signup.errors.push(elem)
          })
        })
      }
    }

    vm.login = function(){
      vm.login.errors = []
      if (!vm.login.password) { vm.login.errors.push('please enter your password') }
      if (!vm.login.email) { vm.login.errors.push('please enter your email') }
      var obj = {
        password: vm.login.password,
        email: vm.login.email
      }
      if (vm.login.errors.length === 0) {
        landingPage.logIn(obj).then(function (res) {
          $localStorage.$default({ token: res.data.token })
          $state.go('dashboard');
        }).catch(function(res){
          console.log("this is the catch in login");
          res.data.errors.forEach(function(elem){
            vm.login.errors.push(elem)
          })
        })
      }
    }
  }

function dashboard($http, $state, $localStorage, dashboard, landingPage){
  var vm = this;
  dashboard.getClasses().then(function (res) {
    vm.classesArray = res.data
  })

  vm.viewlectures = function(links){
    dashboard.getLectures(links).then(function () {
      $state.go('lectures');
    })
  }

  vm.refresh = function(link){
    dashboard.getClasses(link).then(function (res) {
      vm.classesArray = res.data
    })
  }

  vm.logOut = function() {
    landingPage.logOut()
  }
}

angular.module('graspMobile')
.factory('dashboard', function($state, $http, $localStorage){

  var lecturesArray;
  var lecturesLink
  var link;

  return {
    getClasses: getClasses,
    getLectures: getLectures,
    getLecturesArray: getLecturesArray,
    getLink: getLink
  }

  function getLectures(links) {
    lecturesLink = links
    getLink: getLink
  }

  function getLectures(links) {
    link = links.summary
    return $http.get(links.summary)
    .then(function(res){
      return lecturesArray = res.data.attributes.lectures
    });
  }

  function getLink() {
    return link
  }

  function getLecturesArray() {
    return lecturesArray
  }

  function getLectureLinks() {
    return lecturesLink
  }

  function getClasses(){
    // return $http.get('https://panic-button-g20.herokuapp.com/api/v1/users/participations')
    return $http.get('https://panic-button-g20.herokuapp.com/api/v1/users/participations')
    .then(function(res){
      return res
    });
  }
});

angular.module('graspMobile')
.factory('authInterceptor', function ($location, $localStorage, $location) {
  return {
    request: function(config) {
      if ($localStorage.token) {
        config.headers.Authentication = $localStorage.token;
      }
      return config;
    },
  }
});

function lectureDisplay($http, $state, $localStorage, dashboard, landingPage){
  var vm = this;
  vm.link = dashboard.getLink();
    // body...

  vm.lecturesArray = dashboard.getLecturesArray()

  vm.goToLecture = function(lecture_id) {
    $state.go('lectureView', {lecture_id:lecture_id})
  };

  vm.refresh = function(){
    console.log('in refresh bish', vm.link);
    return $http.get(vm.link)
      .then(function(res){
        console.log('server give me a lecture refresh bish', res);
        console.log(res.data.attributes.lectures, 'lectures array?');
        return lecturesArray = res.data.attributes.lectures
      });
  };

  vm.logOut = function() {
    landingPage.logOut()
  }
}

angular.module('graspMobile')
.factory('lectureView', function($state, $http, $localStorage){

  var user_id

  return {
    getMe: getMe,
    getId: getId
  }

  //view changing on each swipe
  //socket send for each vote
  function getMe(){
    // return $http.get('https://panic-button-g20.herokuapp.com/api/v1/auth/me', obj)
    return $http.get('https://panic-button-g20.herokuapp.com/api/v1/auth/me')
    .then(function(res){
      console.log('getme', res.data.id);
      user_id = res.data.id
    });
  }

  function getId() {
    return user_id
  }


});

function lectureViewController ($stateParams, lectureView, landingPage){
    var vm = this;
    // var socket = io.connect('http://Nick-MacBook-Air.local:3000');
    var lecture_id;
    var status;
    var user_id = lectureView.getId();


    // if (socket) {

      // socket.emit('set', {lecture_id: $stateParams.lecture_id, user_id:user_id, status_id: status})
      // socket.on(lecture_id, function (data) {
      //   console.log(data);
      // })
      vm.vote = function() {
        var vote = parseInt(vm.slider)
        // socket.emit('chart', {lecture_id: $stateParams.lecture_id, user_id: user_id, status_id: vote, lastStatus: status})
        console.log({lecture_id: $stateParams.lecture_id, user_id: user_id, status_id: vote, lastStatus: status});
        status = vote;
      }
    // } else {
    //   console.log('socket not available');
    // }

    vm.logOut = function() {
      landingPage.logOut()
    }

  }

angular.module('graspMobile')

.config(function($stateProvider, $urlRouterProvider, $httpProvider) {
  $httpProvider.interceptors.push("authInterceptor");

  $stateProvider
  .state('logo', {
    url: '/',
    templateUrl: 'templates/logo.html'
  })
  .state('landing', {
    scope: {},
    url: '/landing',
    controllerAs: 'vm',
    templateUrl: 'templates/landing.html',
    controller: landingController,
  })
  .state('dashboard', {
    scope: {},
    url: '/dashboard',
    controllerAs: 'vm',
    templateUrl: 'templates/dashboard.html',
    controller: dashboard,
  })
  .state('lectures', {
    scope: {},
    url: '/lectures',
    controllerAs: 'vm',
    templateUrl: 'templates/lectures.html',
    controller: lectureDisplay
  })
  .state('lectureView', {
    scope: {},
    url: '/lectureview/:id',
    params: {lecture_id: null},
    controllerAs: 'vm',
    templateUrl: 'templates/lectureView.html',
    controller: lectureViewController,
    resolve: {
      user: function(lectureView) {
        return lectureView.getMe()
      }
    }
  })

  // if none of the above states are matched, use this as the fallback
  $urlRouterProvider.otherwise('/');
});
